# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_person/PersonTracking.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import realsense_person.msg
import std_msgs.msg

class PersonTracking(genpy.Message):
  _md5sum = "cd4b605d2e359f7a66aec70c6f928898"
  _type = "realsense_person/PersonTracking"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header 
realsense_person/Person person
realsense_person/PersonFace person_face
realsense_person/PersonBody person_body
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: realsense_person/Person
realsense_person/PersonId person_id
realsense_person/BoundingBox bounding_box
realsense_person/RegisteredPoint center_of_mass
================================================================================
MSG: realsense_person/PersonId
uint32 tracking_id
int32 recognition_id         #currently not populated.
string recognition_name      #placeholder in case application associates a name to the recognition_id. 
================================================================================
MSG: realsense_person/BoundingBox
int32 x
int32 y
int32 w #width of the box
int32 h #height of the box
int32 confidence

================================================================================
MSG: realsense_person/RegisteredPoint
geometry_msgs/Point world
int32 world_confidence
geometry_msgs/Point image
int32 image_confidence
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: realsense_person/PersonFace
string orientation
int32 orientation_confidence
realsense_person/BoundingBox head_bounding_box
geometry_msgs/Point head_pose                         #head_pose.x = pitch, head_pose.y = roll, head_pose.z = yaw
realsense_person/RegisteredPoint[] landmarks
int32 landmarks_confidence

================================================================================
MSG: realsense_person/PersonBody
realsense_person/PersonSkeleton[] skeleton
realsense_person/RegisteredPoint gesture_origin
realsense_person/RegisteredPoint gesture_direction
int32 gesture_confidence


================================================================================
MSG: realsense_person/PersonSkeleton
string joint_type
realsense_person/RegisteredPoint skeleton_point

"""
  __slots__ = ['header','person','person_face','person_body']
  _slot_types = ['std_msgs/Header','realsense_person/Person','realsense_person/PersonFace','realsense_person/PersonBody']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,person,person_face,person_body

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PersonTracking, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.person is None:
        self.person = realsense_person.msg.Person()
      if self.person_face is None:
        self.person_face = realsense_person.msg.PersonFace()
      if self.person_body is None:
        self.person_body = realsense_person.msg.PersonBody()
    else:
      self.header = std_msgs.msg.Header()
      self.person = realsense_person.msg.Person()
      self.person_face = realsense_person.msg.PersonFace()
      self.person_body = realsense_person.msg.PersonBody()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Ii().pack(_x.person.person_id.tracking_id, _x.person.person_id.recognition_id))
      _x = self.person.person_id.recognition_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5i3di3di().pack(_x.person.bounding_box.x, _x.person.bounding_box.y, _x.person.bounding_box.w, _x.person.bounding_box.h, _x.person.bounding_box.confidence, _x.person.center_of_mass.world.x, _x.person.center_of_mass.world.y, _x.person.center_of_mass.world.z, _x.person.center_of_mass.world_confidence, _x.person.center_of_mass.image.x, _x.person.center_of_mass.image.y, _x.person.center_of_mass.image.z, _x.person.center_of_mass.image_confidence))
      _x = self.person_face.orientation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6i3d().pack(_x.person_face.orientation_confidence, _x.person_face.head_bounding_box.x, _x.person_face.head_bounding_box.y, _x.person_face.head_bounding_box.w, _x.person_face.head_bounding_box.h, _x.person_face.head_bounding_box.confidence, _x.person_face.head_pose.x, _x.person_face.head_pose.y, _x.person_face.head_pose.z))
      length = len(self.person_face.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.person_face.landmarks:
        _v1 = val1.world
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.world_confidence
        buff.write(_get_struct_i().pack(_x))
        _v2 = val1.image
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.image_confidence
        buff.write(_get_struct_i().pack(_x))
      _x = self.person_face.landmarks_confidence
      buff.write(_get_struct_i().pack(_x))
      length = len(self.person_body.skeleton)
      buff.write(_struct_I.pack(length))
      for val1 in self.person_body.skeleton:
        _x = val1.joint_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.skeleton_point
        _v4 = _v3.world
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v3.world_confidence
        buff.write(_get_struct_i().pack(_x))
        _v5 = _v3.image
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v3.image_confidence
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_3di3di3di3d2i().pack(_x.person_body.gesture_origin.world.x, _x.person_body.gesture_origin.world.y, _x.person_body.gesture_origin.world.z, _x.person_body.gesture_origin.world_confidence, _x.person_body.gesture_origin.image.x, _x.person_body.gesture_origin.image.y, _x.person_body.gesture_origin.image.z, _x.person_body.gesture_origin.image_confidence, _x.person_body.gesture_direction.world.x, _x.person_body.gesture_direction.world.y, _x.person_body.gesture_direction.world.z, _x.person_body.gesture_direction.world_confidence, _x.person_body.gesture_direction.image.x, _x.person_body.gesture_direction.image.y, _x.person_body.gesture_direction.image.z, _x.person_body.gesture_direction.image_confidence, _x.person_body.gesture_confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.person is None:
        self.person = realsense_person.msg.Person()
      if self.person_face is None:
        self.person_face = realsense_person.msg.PersonFace()
      if self.person_body is None:
        self.person_body = realsense_person.msg.PersonBody()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.person.person_id.tracking_id, _x.person.person_id.recognition_id,) = _get_struct_Ii().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.person.person_id.recognition_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.person.person_id.recognition_name = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.person.bounding_box.x, _x.person.bounding_box.y, _x.person.bounding_box.w, _x.person.bounding_box.h, _x.person.bounding_box.confidence, _x.person.center_of_mass.world.x, _x.person.center_of_mass.world.y, _x.person.center_of_mass.world.z, _x.person.center_of_mass.world_confidence, _x.person.center_of_mass.image.x, _x.person.center_of_mass.image.y, _x.person.center_of_mass.image.z, _x.person.center_of_mass.image_confidence,) = _get_struct_5i3di3di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.person_face.orientation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.person_face.orientation = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.person_face.orientation_confidence, _x.person_face.head_bounding_box.x, _x.person_face.head_bounding_box.y, _x.person_face.head_bounding_box.w, _x.person_face.head_bounding_box.h, _x.person_face.head_bounding_box.confidence, _x.person_face.head_pose.x, _x.person_face.head_pose.y, _x.person_face.head_pose.z,) = _get_struct_6i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.person_face.landmarks = []
      for i in range(0, length):
        val1 = realsense_person.msg.RegisteredPoint()
        _v6 = val1.world
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.world_confidence,) = _get_struct_i().unpack(str[start:end])
        _v7 = val1.image
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.image_confidence,) = _get_struct_i().unpack(str[start:end])
        self.person_face.landmarks.append(val1)
      start = end
      end += 4
      (self.person_face.landmarks_confidence,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.person_body.skeleton = []
      for i in range(0, length):
        val1 = realsense_person.msg.PersonSkeleton()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.joint_type = str[start:end]
        _v8 = val1.skeleton_point
        _v9 = _v8.world
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v8.world_confidence,) = _get_struct_i().unpack(str[start:end])
        _v10 = _v8.image
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v8.image_confidence,) = _get_struct_i().unpack(str[start:end])
        self.person_body.skeleton.append(val1)
      _x = self
      start = end
      end += 116
      (_x.person_body.gesture_origin.world.x, _x.person_body.gesture_origin.world.y, _x.person_body.gesture_origin.world.z, _x.person_body.gesture_origin.world_confidence, _x.person_body.gesture_origin.image.x, _x.person_body.gesture_origin.image.y, _x.person_body.gesture_origin.image.z, _x.person_body.gesture_origin.image_confidence, _x.person_body.gesture_direction.world.x, _x.person_body.gesture_direction.world.y, _x.person_body.gesture_direction.world.z, _x.person_body.gesture_direction.world_confidence, _x.person_body.gesture_direction.image.x, _x.person_body.gesture_direction.image.y, _x.person_body.gesture_direction.image.z, _x.person_body.gesture_direction.image_confidence, _x.person_body.gesture_confidence,) = _get_struct_3di3di3di3d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Ii().pack(_x.person.person_id.tracking_id, _x.person.person_id.recognition_id))
      _x = self.person.person_id.recognition_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5i3di3di().pack(_x.person.bounding_box.x, _x.person.bounding_box.y, _x.person.bounding_box.w, _x.person.bounding_box.h, _x.person.bounding_box.confidence, _x.person.center_of_mass.world.x, _x.person.center_of_mass.world.y, _x.person.center_of_mass.world.z, _x.person.center_of_mass.world_confidence, _x.person.center_of_mass.image.x, _x.person.center_of_mass.image.y, _x.person.center_of_mass.image.z, _x.person.center_of_mass.image_confidence))
      _x = self.person_face.orientation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6i3d().pack(_x.person_face.orientation_confidence, _x.person_face.head_bounding_box.x, _x.person_face.head_bounding_box.y, _x.person_face.head_bounding_box.w, _x.person_face.head_bounding_box.h, _x.person_face.head_bounding_box.confidence, _x.person_face.head_pose.x, _x.person_face.head_pose.y, _x.person_face.head_pose.z))
      length = len(self.person_face.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.person_face.landmarks:
        _v11 = val1.world
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.world_confidence
        buff.write(_get_struct_i().pack(_x))
        _v12 = val1.image
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.image_confidence
        buff.write(_get_struct_i().pack(_x))
      _x = self.person_face.landmarks_confidence
      buff.write(_get_struct_i().pack(_x))
      length = len(self.person_body.skeleton)
      buff.write(_struct_I.pack(length))
      for val1 in self.person_body.skeleton:
        _x = val1.joint_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = val1.skeleton_point
        _v14 = _v13.world
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v13.world_confidence
        buff.write(_get_struct_i().pack(_x))
        _v15 = _v13.image
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v13.image_confidence
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_3di3di3di3d2i().pack(_x.person_body.gesture_origin.world.x, _x.person_body.gesture_origin.world.y, _x.person_body.gesture_origin.world.z, _x.person_body.gesture_origin.world_confidence, _x.person_body.gesture_origin.image.x, _x.person_body.gesture_origin.image.y, _x.person_body.gesture_origin.image.z, _x.person_body.gesture_origin.image_confidence, _x.person_body.gesture_direction.world.x, _x.person_body.gesture_direction.world.y, _x.person_body.gesture_direction.world.z, _x.person_body.gesture_direction.world_confidence, _x.person_body.gesture_direction.image.x, _x.person_body.gesture_direction.image.y, _x.person_body.gesture_direction.image.z, _x.person_body.gesture_direction.image_confidence, _x.person_body.gesture_confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.person is None:
        self.person = realsense_person.msg.Person()
      if self.person_face is None:
        self.person_face = realsense_person.msg.PersonFace()
      if self.person_body is None:
        self.person_body = realsense_person.msg.PersonBody()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.person.person_id.tracking_id, _x.person.person_id.recognition_id,) = _get_struct_Ii().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.person.person_id.recognition_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.person.person_id.recognition_name = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.person.bounding_box.x, _x.person.bounding_box.y, _x.person.bounding_box.w, _x.person.bounding_box.h, _x.person.bounding_box.confidence, _x.person.center_of_mass.world.x, _x.person.center_of_mass.world.y, _x.person.center_of_mass.world.z, _x.person.center_of_mass.world_confidence, _x.person.center_of_mass.image.x, _x.person.center_of_mass.image.y, _x.person.center_of_mass.image.z, _x.person.center_of_mass.image_confidence,) = _get_struct_5i3di3di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.person_face.orientation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.person_face.orientation = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.person_face.orientation_confidence, _x.person_face.head_bounding_box.x, _x.person_face.head_bounding_box.y, _x.person_face.head_bounding_box.w, _x.person_face.head_bounding_box.h, _x.person_face.head_bounding_box.confidence, _x.person_face.head_pose.x, _x.person_face.head_pose.y, _x.person_face.head_pose.z,) = _get_struct_6i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.person_face.landmarks = []
      for i in range(0, length):
        val1 = realsense_person.msg.RegisteredPoint()
        _v16 = val1.world
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.world_confidence,) = _get_struct_i().unpack(str[start:end])
        _v17 = val1.image
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.image_confidence,) = _get_struct_i().unpack(str[start:end])
        self.person_face.landmarks.append(val1)
      start = end
      end += 4
      (self.person_face.landmarks_confidence,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.person_body.skeleton = []
      for i in range(0, length):
        val1 = realsense_person.msg.PersonSkeleton()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.joint_type = str[start:end]
        _v18 = val1.skeleton_point
        _v19 = _v18.world
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v18.world_confidence,) = _get_struct_i().unpack(str[start:end])
        _v20 = _v18.image
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v18.image_confidence,) = _get_struct_i().unpack(str[start:end])
        self.person_body.skeleton.append(val1)
      _x = self
      start = end
      end += 116
      (_x.person_body.gesture_origin.world.x, _x.person_body.gesture_origin.world.y, _x.person_body.gesture_origin.world.z, _x.person_body.gesture_origin.world_confidence, _x.person_body.gesture_origin.image.x, _x.person_body.gesture_origin.image.y, _x.person_body.gesture_origin.image.z, _x.person_body.gesture_origin.image_confidence, _x.person_body.gesture_direction.world.x, _x.person_body.gesture_direction.world.y, _x.person_body.gesture_direction.world.z, _x.person_body.gesture_direction.world_confidence, _x.person_body.gesture_direction.image.x, _x.person_body.gesture_direction.image.y, _x.person_body.gesture_direction.image.z, _x.person_body.gesture_direction.image_confidence, _x.person_body.gesture_confidence,) = _get_struct_3di3di3di3d2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3di3di3di3d2i = None
def _get_struct_3di3di3di3d2i():
    global _struct_3di3di3di3d2i
    if _struct_3di3di3di3d2i is None:
        _struct_3di3di3di3d2i = struct.Struct("<3di3di3di3d2i")
    return _struct_3di3di3di3d2i
_struct_5i3di3di = None
def _get_struct_5i3di3di():
    global _struct_5i3di3di
    if _struct_5i3di3di is None:
        _struct_5i3di3di = struct.Struct("<5i3di3di")
    return _struct_5i3di3di
_struct_6i3d = None
def _get_struct_6i3d():
    global _struct_6i3d
    if _struct_6i3d is None:
        _struct_6i3d = struct.Struct("<6i3d")
    return _struct_6i3d
_struct_Ii = None
def _get_struct_Ii():
    global _struct_Ii
    if _struct_Ii is None:
        _struct_Ii = struct.Struct("<Ii")
    return _struct_Ii
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
