// Generated by gencpp from file realsense_person/PersonId.msg
// DO NOT EDIT!


#ifndef REALSENSE_PERSON_MESSAGE_PERSONID_H
#define REALSENSE_PERSON_MESSAGE_PERSONID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace realsense_person
{
template <class ContainerAllocator>
struct PersonId_
{
  typedef PersonId_<ContainerAllocator> Type;

  PersonId_()
    : tracking_id(0)
    , recognition_id(0)
    , recognition_name()  {
    }
  PersonId_(const ContainerAllocator& _alloc)
    : tracking_id(0)
    , recognition_id(0)
    , recognition_name(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _tracking_id_type;
  _tracking_id_type tracking_id;

   typedef int32_t _recognition_id_type;
  _recognition_id_type recognition_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _recognition_name_type;
  _recognition_name_type recognition_name;





  typedef boost::shared_ptr< ::realsense_person::PersonId_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_person::PersonId_<ContainerAllocator> const> ConstPtr;

}; // struct PersonId_

typedef ::realsense_person::PersonId_<std::allocator<void> > PersonId;

typedef boost::shared_ptr< ::realsense_person::PersonId > PersonIdPtr;
typedef boost::shared_ptr< ::realsense_person::PersonId const> PersonIdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_person::PersonId_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_person::PersonId_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense_person::PersonId_<ContainerAllocator1> & lhs, const ::realsense_person::PersonId_<ContainerAllocator2> & rhs)
{
  return lhs.tracking_id == rhs.tracking_id &&
    lhs.recognition_id == rhs.recognition_id &&
    lhs.recognition_name == rhs.recognition_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense_person::PersonId_<ContainerAllocator1> & lhs, const ::realsense_person::PersonId_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonId_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonId_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonId_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonId_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonId_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonId_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_person::PersonId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5eb5b111f0e9bfed7be82e0b5f5a69a";
  }

  static const char* value(const ::realsense_person::PersonId_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5eb5b111f0e9bfeULL;
  static const uint64_t static_value2 = 0xd7be82e0b5f5a69aULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_person::PersonId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_person/PersonId";
  }

  static const char* value(const ::realsense_person::PersonId_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_person::PersonId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 tracking_id\n"
"int32 recognition_id         #currently not populated.\n"
"string recognition_name      #placeholder in case application associates a name to the recognition_id. \n"
;
  }

  static const char* value(const ::realsense_person::PersonId_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_person::PersonId_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tracking_id);
      stream.next(m.recognition_id);
      stream.next(m.recognition_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PersonId_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_person::PersonId_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_person::PersonId_<ContainerAllocator>& v)
  {
    s << indent << "tracking_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tracking_id);
    s << indent << "recognition_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.recognition_id);
    s << indent << "recognition_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.recognition_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_PERSON_MESSAGE_PERSONID_H
