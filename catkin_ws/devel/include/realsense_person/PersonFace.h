// Generated by gencpp from file realsense_person/PersonFace.msg
// DO NOT EDIT!


#ifndef REALSENSE_PERSON_MESSAGE_PERSONFACE_H
#define REALSENSE_PERSON_MESSAGE_PERSONFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <realsense_person/BoundingBox.h>
#include <geometry_msgs/Point.h>
#include <realsense_person/RegisteredPoint.h>

namespace realsense_person
{
template <class ContainerAllocator>
struct PersonFace_
{
  typedef PersonFace_<ContainerAllocator> Type;

  PersonFace_()
    : orientation()
    , orientation_confidence(0)
    , head_bounding_box()
    , head_pose()
    , landmarks()
    , landmarks_confidence(0)  {
    }
  PersonFace_(const ContainerAllocator& _alloc)
    : orientation(_alloc)
    , orientation_confidence(0)
    , head_bounding_box(_alloc)
    , head_pose(_alloc)
    , landmarks(_alloc)
    , landmarks_confidence(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _orientation_type;
  _orientation_type orientation;

   typedef int32_t _orientation_confidence_type;
  _orientation_confidence_type orientation_confidence;

   typedef  ::realsense_person::BoundingBox_<ContainerAllocator>  _head_bounding_box_type;
  _head_bounding_box_type head_bounding_box;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _head_pose_type;
  _head_pose_type head_pose;

   typedef std::vector< ::realsense_person::RegisteredPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::realsense_person::RegisteredPoint_<ContainerAllocator> >> _landmarks_type;
  _landmarks_type landmarks;

   typedef int32_t _landmarks_confidence_type;
  _landmarks_confidence_type landmarks_confidence;





  typedef boost::shared_ptr< ::realsense_person::PersonFace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_person::PersonFace_<ContainerAllocator> const> ConstPtr;

}; // struct PersonFace_

typedef ::realsense_person::PersonFace_<std::allocator<void> > PersonFace;

typedef boost::shared_ptr< ::realsense_person::PersonFace > PersonFacePtr;
typedef boost::shared_ptr< ::realsense_person::PersonFace const> PersonFaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_person::PersonFace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_person::PersonFace_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense_person::PersonFace_<ContainerAllocator1> & lhs, const ::realsense_person::PersonFace_<ContainerAllocator2> & rhs)
{
  return lhs.orientation == rhs.orientation &&
    lhs.orientation_confidence == rhs.orientation_confidence &&
    lhs.head_bounding_box == rhs.head_bounding_box &&
    lhs.head_pose == rhs.head_pose &&
    lhs.landmarks == rhs.landmarks &&
    lhs.landmarks_confidence == rhs.landmarks_confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense_person::PersonFace_<ContainerAllocator1> & lhs, const ::realsense_person::PersonFace_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonFace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonFace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonFace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonFace_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonFace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonFace_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_person::PersonFace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a9e6d7f59e4f091518a51ac905c4d3f";
  }

  static const char* value(const ::realsense_person::PersonFace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a9e6d7f59e4f091ULL;
  static const uint64_t static_value2 = 0x518a51ac905c4d3fULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_person::PersonFace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_person/PersonFace";
  }

  static const char* value(const ::realsense_person::PersonFace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_person::PersonFace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string orientation\n"
"int32 orientation_confidence\n"
"realsense_person/BoundingBox head_bounding_box\n"
"geometry_msgs/Point head_pose                         #head_pose.x = pitch, head_pose.y = roll, head_pose.z = yaw\n"
"realsense_person/RegisteredPoint[] landmarks\n"
"int32 landmarks_confidence\n"
"\n"
"================================================================================\n"
"MSG: realsense_person/BoundingBox\n"
"int32 x\n"
"int32 y\n"
"int32 w #width of the box\n"
"int32 h #height of the box\n"
"int32 confidence\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: realsense_person/RegisteredPoint\n"
"geometry_msgs/Point world\n"
"int32 world_confidence\n"
"geometry_msgs/Point image\n"
"int32 image_confidence\n"
;
  }

  static const char* value(const ::realsense_person::PersonFace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_person::PersonFace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orientation);
      stream.next(m.orientation_confidence);
      stream.next(m.head_bounding_box);
      stream.next(m.head_pose);
      stream.next(m.landmarks);
      stream.next(m.landmarks_confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PersonFace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_person::PersonFace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_person::PersonFace_<ContainerAllocator>& v)
  {
    s << indent << "orientation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.orientation);
    s << indent << "orientation_confidence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.orientation_confidence);
    s << indent << "head_bounding_box: ";
    s << std::endl;
    Printer< ::realsense_person::BoundingBox_<ContainerAllocator> >::stream(s, indent + "  ", v.head_bounding_box);
    s << indent << "head_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.head_pose);
    s << indent << "landmarks[]" << std::endl;
    for (size_t i = 0; i < v.landmarks.size(); ++i)
    {
      s << indent << "  landmarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realsense_person::RegisteredPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.landmarks[i]);
    }
    s << indent << "landmarks_confidence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.landmarks_confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_PERSON_MESSAGE_PERSONFACE_H
