# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_person/PersonFace.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import realsense_person.msg

class PersonFace(genpy.Message):
  _md5sum = "3a9e6d7f59e4f091518a51ac905c4d3f"
  _type = "realsense_person/PersonFace"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string orientation
int32 orientation_confidence
realsense_person/BoundingBox head_bounding_box
geometry_msgs/Point head_pose                         #head_pose.x = pitch, head_pose.y = roll, head_pose.z = yaw
realsense_person/RegisteredPoint[] landmarks
int32 landmarks_confidence

================================================================================
MSG: realsense_person/BoundingBox
int32 x
int32 y
int32 w #width of the box
int32 h #height of the box
int32 confidence

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: realsense_person/RegisteredPoint
geometry_msgs/Point world
int32 world_confidence
geometry_msgs/Point image
int32 image_confidence"""
  __slots__ = ['orientation','orientation_confidence','head_bounding_box','head_pose','landmarks','landmarks_confidence']
  _slot_types = ['string','int32','realsense_person/BoundingBox','geometry_msgs/Point','realsense_person/RegisteredPoint[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       orientation,orientation_confidence,head_bounding_box,head_pose,landmarks,landmarks_confidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PersonFace, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.orientation is None:
        self.orientation = ''
      if self.orientation_confidence is None:
        self.orientation_confidence = 0
      if self.head_bounding_box is None:
        self.head_bounding_box = realsense_person.msg.BoundingBox()
      if self.head_pose is None:
        self.head_pose = geometry_msgs.msg.Point()
      if self.landmarks is None:
        self.landmarks = []
      if self.landmarks_confidence is None:
        self.landmarks_confidence = 0
    else:
      self.orientation = ''
      self.orientation_confidence = 0
      self.head_bounding_box = realsense_person.msg.BoundingBox()
      self.head_pose = geometry_msgs.msg.Point()
      self.landmarks = []
      self.landmarks_confidence = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.orientation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6i3d().pack(_x.orientation_confidence, _x.head_bounding_box.x, _x.head_bounding_box.y, _x.head_bounding_box.w, _x.head_bounding_box.h, _x.head_bounding_box.confidence, _x.head_pose.x, _x.head_pose.y, _x.head_pose.z))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _v1 = val1.world
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.world_confidence
        buff.write(_get_struct_i().pack(_x))
        _v2 = val1.image
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.image_confidence
        buff.write(_get_struct_i().pack(_x))
      _x = self.landmarks_confidence
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.head_bounding_box is None:
        self.head_bounding_box = realsense_person.msg.BoundingBox()
      if self.head_pose is None:
        self.head_pose = geometry_msgs.msg.Point()
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.orientation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.orientation = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.orientation_confidence, _x.head_bounding_box.x, _x.head_bounding_box.y, _x.head_bounding_box.w, _x.head_bounding_box.h, _x.head_bounding_box.confidence, _x.head_pose.x, _x.head_pose.y, _x.head_pose.z,) = _get_struct_6i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = realsense_person.msg.RegisteredPoint()
        _v3 = val1.world
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.world_confidence,) = _get_struct_i().unpack(str[start:end])
        _v4 = val1.image
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.image_confidence,) = _get_struct_i().unpack(str[start:end])
        self.landmarks.append(val1)
      start = end
      end += 4
      (self.landmarks_confidence,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.orientation
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6i3d().pack(_x.orientation_confidence, _x.head_bounding_box.x, _x.head_bounding_box.y, _x.head_bounding_box.w, _x.head_bounding_box.h, _x.head_bounding_box.confidence, _x.head_pose.x, _x.head_pose.y, _x.head_pose.z))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _v5 = val1.world
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.world_confidence
        buff.write(_get_struct_i().pack(_x))
        _v6 = val1.image
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.image_confidence
        buff.write(_get_struct_i().pack(_x))
      _x = self.landmarks_confidence
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.head_bounding_box is None:
        self.head_bounding_box = realsense_person.msg.BoundingBox()
      if self.head_pose is None:
        self.head_pose = geometry_msgs.msg.Point()
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.orientation = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.orientation = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.orientation_confidence, _x.head_bounding_box.x, _x.head_bounding_box.y, _x.head_bounding_box.w, _x.head_bounding_box.h, _x.head_bounding_box.confidence, _x.head_pose.x, _x.head_pose.y, _x.head_pose.z,) = _get_struct_6i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = realsense_person.msg.RegisteredPoint()
        _v7 = val1.world
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.world_confidence,) = _get_struct_i().unpack(str[start:end])
        _v8 = val1.image
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.image_confidence,) = _get_struct_i().unpack(str[start:end])
        self.landmarks.append(val1)
      start = end
      end += 4
      (self.landmarks_confidence,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6i3d = None
def _get_struct_6i3d():
    global _struct_6i3d
    if _struct_6i3d is None:
        _struct_6i3d = struct.Struct("<6i3d")
    return _struct_6i3d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
