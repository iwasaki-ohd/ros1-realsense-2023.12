// Generated by gencpp from file realsense_person/PersonSkeleton.msg
// DO NOT EDIT!


#ifndef REALSENSE_PERSON_MESSAGE_PERSONSKELETON_H
#define REALSENSE_PERSON_MESSAGE_PERSONSKELETON_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <realsense_person/RegisteredPoint.h>

namespace realsense_person
{
template <class ContainerAllocator>
struct PersonSkeleton_
{
  typedef PersonSkeleton_<ContainerAllocator> Type;

  PersonSkeleton_()
    : joint_type()
    , skeleton_point()  {
    }
  PersonSkeleton_(const ContainerAllocator& _alloc)
    : joint_type(_alloc)
    , skeleton_point(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _joint_type_type;
  _joint_type_type joint_type;

   typedef  ::realsense_person::RegisteredPoint_<ContainerAllocator>  _skeleton_point_type;
  _skeleton_point_type skeleton_point;





  typedef boost::shared_ptr< ::realsense_person::PersonSkeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_person::PersonSkeleton_<ContainerAllocator> const> ConstPtr;

}; // struct PersonSkeleton_

typedef ::realsense_person::PersonSkeleton_<std::allocator<void> > PersonSkeleton;

typedef boost::shared_ptr< ::realsense_person::PersonSkeleton > PersonSkeletonPtr;
typedef boost::shared_ptr< ::realsense_person::PersonSkeleton const> PersonSkeletonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_person::PersonSkeleton_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_person::PersonSkeleton_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense_person::PersonSkeleton_<ContainerAllocator1> & lhs, const ::realsense_person::PersonSkeleton_<ContainerAllocator2> & rhs)
{
  return lhs.joint_type == rhs.joint_type &&
    lhs.skeleton_point == rhs.skeleton_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense_person::PersonSkeleton_<ContainerAllocator1> & lhs, const ::realsense_person::PersonSkeleton_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonSkeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonSkeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonSkeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonSkeleton_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonSkeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonSkeleton_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_person::PersonSkeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "830cfdb700931a76a5884c7211cc3672";
  }

  static const char* value(const ::realsense_person::PersonSkeleton_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x830cfdb700931a76ULL;
  static const uint64_t static_value2 = 0xa5884c7211cc3672ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_person::PersonSkeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_person/PersonSkeleton";
  }

  static const char* value(const ::realsense_person::PersonSkeleton_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_person::PersonSkeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string joint_type\n"
"realsense_person/RegisteredPoint skeleton_point\n"
"\n"
"\n"
"================================================================================\n"
"MSG: realsense_person/RegisteredPoint\n"
"geometry_msgs/Point world\n"
"int32 world_confidence\n"
"geometry_msgs/Point image\n"
"int32 image_confidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::realsense_person::PersonSkeleton_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_person::PersonSkeleton_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_type);
      stream.next(m.skeleton_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PersonSkeleton_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_person::PersonSkeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_person::PersonSkeleton_<ContainerAllocator>& v)
  {
    s << indent << "joint_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_type);
    s << indent << "skeleton_point: ";
    s << std::endl;
    Printer< ::realsense_person::RegisteredPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.skeleton_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_PERSON_MESSAGE_PERSONSKELETON_H
