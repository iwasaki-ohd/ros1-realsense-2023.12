// Generated by gencpp from file realsense_person/PersonDetection.msg
// DO NOT EDIT!


#ifndef REALSENSE_PERSON_MESSAGE_PERSONDETECTION_H
#define REALSENSE_PERSON_MESSAGE_PERSONDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <realsense_person/Person.h>

namespace realsense_person
{
template <class ContainerAllocator>
struct PersonDetection_
{
  typedef PersonDetection_<ContainerAllocator> Type;

  PersonDetection_()
    : header()
    , detected_person_count(0)
    , persons()  {
    }
  PersonDetection_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , detected_person_count(0)
    , persons(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _detected_person_count_type;
  _detected_person_count_type detected_person_count;

   typedef std::vector< ::realsense_person::Person_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::realsense_person::Person_<ContainerAllocator> >> _persons_type;
  _persons_type persons;





  typedef boost::shared_ptr< ::realsense_person::PersonDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_person::PersonDetection_<ContainerAllocator> const> ConstPtr;

}; // struct PersonDetection_

typedef ::realsense_person::PersonDetection_<std::allocator<void> > PersonDetection;

typedef boost::shared_ptr< ::realsense_person::PersonDetection > PersonDetectionPtr;
typedef boost::shared_ptr< ::realsense_person::PersonDetection const> PersonDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_person::PersonDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_person::PersonDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense_person::PersonDetection_<ContainerAllocator1> & lhs, const ::realsense_person::PersonDetection_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.detected_person_count == rhs.detected_person_count &&
    lhs.persons == rhs.persons;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense_person::PersonDetection_<ContainerAllocator1> & lhs, const ::realsense_person::PersonDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonDetection_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_person::PersonDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcb6ddad07788a68cae398b4b226fa64";
  }

  static const char* value(const ::realsense_person::PersonDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfcb6ddad07788a68ULL;
  static const uint64_t static_value2 = 0xcae398b4b226fa64ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_person::PersonDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_person/PersonDetection";
  }

  static const char* value(const ::realsense_person::PersonDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_person::PersonDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint32 detected_person_count\n"
"realsense_person/Person[] persons\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: realsense_person/Person\n"
"realsense_person/PersonId person_id\n"
"realsense_person/BoundingBox bounding_box\n"
"realsense_person/RegisteredPoint center_of_mass\n"
"================================================================================\n"
"MSG: realsense_person/PersonId\n"
"uint32 tracking_id\n"
"int32 recognition_id         #currently not populated.\n"
"string recognition_name      #placeholder in case application associates a name to the recognition_id. \n"
"================================================================================\n"
"MSG: realsense_person/BoundingBox\n"
"int32 x\n"
"int32 y\n"
"int32 w #width of the box\n"
"int32 h #height of the box\n"
"int32 confidence\n"
"\n"
"================================================================================\n"
"MSG: realsense_person/RegisteredPoint\n"
"geometry_msgs/Point world\n"
"int32 world_confidence\n"
"geometry_msgs/Point image\n"
"int32 image_confidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::realsense_person::PersonDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_person::PersonDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.detected_person_count);
      stream.next(m.persons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PersonDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_person::PersonDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_person::PersonDetection_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "detected_person_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.detected_person_count);
    s << indent << "persons[]" << std::endl;
    for (size_t i = 0; i < v.persons.size(); ++i)
    {
      s << indent << "  persons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realsense_person::Person_<ContainerAllocator> >::stream(s, indent + "    ", v.persons[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_PERSON_MESSAGE_PERSONDETECTION_H
