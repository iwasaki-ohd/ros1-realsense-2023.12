// Generated by gencpp from file realsense_person/Person.msg
// DO NOT EDIT!


#ifndef REALSENSE_PERSON_MESSAGE_PERSON_H
#define REALSENSE_PERSON_MESSAGE_PERSON_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <realsense_person/PersonId.h>
#include <realsense_person/BoundingBox.h>
#include <realsense_person/RegisteredPoint.h>

namespace realsense_person
{
template <class ContainerAllocator>
struct Person_
{
  typedef Person_<ContainerAllocator> Type;

  Person_()
    : person_id()
    , bounding_box()
    , center_of_mass()  {
    }
  Person_(const ContainerAllocator& _alloc)
    : person_id(_alloc)
    , bounding_box(_alloc)
    , center_of_mass(_alloc)  {
  (void)_alloc;
    }



   typedef  ::realsense_person::PersonId_<ContainerAllocator>  _person_id_type;
  _person_id_type person_id;

   typedef  ::realsense_person::BoundingBox_<ContainerAllocator>  _bounding_box_type;
  _bounding_box_type bounding_box;

   typedef  ::realsense_person::RegisteredPoint_<ContainerAllocator>  _center_of_mass_type;
  _center_of_mass_type center_of_mass;





  typedef boost::shared_ptr< ::realsense_person::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_person::Person_<ContainerAllocator> const> ConstPtr;

}; // struct Person_

typedef ::realsense_person::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::realsense_person::Person > PersonPtr;
typedef boost::shared_ptr< ::realsense_person::Person const> PersonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_person::Person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_person::Person_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense_person::Person_<ContainerAllocator1> & lhs, const ::realsense_person::Person_<ContainerAllocator2> & rhs)
{
  return lhs.person_id == rhs.person_id &&
    lhs.bounding_box == rhs.bounding_box &&
    lhs.center_of_mass == rhs.center_of_mass;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense_person::Person_<ContainerAllocator1> & lhs, const ::realsense_person::Person_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realsense_person::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_person::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::Person_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::Person_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_person::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6933144e4378998756b146a1cd151c9e";
  }

  static const char* value(const ::realsense_person::Person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6933144e43789987ULL;
  static const uint64_t static_value2 = 0x56b146a1cd151c9eULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_person::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_person/Person";
  }

  static const char* value(const ::realsense_person::Person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_person::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_person/PersonId person_id\n"
"realsense_person/BoundingBox bounding_box\n"
"realsense_person/RegisteredPoint center_of_mass\n"
"================================================================================\n"
"MSG: realsense_person/PersonId\n"
"uint32 tracking_id\n"
"int32 recognition_id         #currently not populated.\n"
"string recognition_name      #placeholder in case application associates a name to the recognition_id. \n"
"================================================================================\n"
"MSG: realsense_person/BoundingBox\n"
"int32 x\n"
"int32 y\n"
"int32 w #width of the box\n"
"int32 h #height of the box\n"
"int32 confidence\n"
"\n"
"================================================================================\n"
"MSG: realsense_person/RegisteredPoint\n"
"geometry_msgs/Point world\n"
"int32 world_confidence\n"
"geometry_msgs/Point image\n"
"int32 image_confidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::realsense_person::Person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_person::Person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.person_id);
      stream.next(m.bounding_box);
      stream.next(m.center_of_mass);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_person::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_person::Person_<ContainerAllocator>& v)
  {
    s << indent << "person_id: ";
    s << std::endl;
    Printer< ::realsense_person::PersonId_<ContainerAllocator> >::stream(s, indent + "  ", v.person_id);
    s << indent << "bounding_box: ";
    s << std::endl;
    Printer< ::realsense_person::BoundingBox_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_box);
    s << indent << "center_of_mass: ";
    s << std::endl;
    Printer< ::realsense_person::RegisteredPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.center_of_mass);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_PERSON_MESSAGE_PERSON_H
