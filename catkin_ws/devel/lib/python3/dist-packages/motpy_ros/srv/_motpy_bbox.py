# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motpy_ros/motpy_bboxRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import darknet_ros_msgs.msg
import std_msgs.msg

class motpy_bboxRequest(genpy.Message):
  _md5sum = "89c24386ecd269e72479b7994ea9d64b"
  _type = "motpy_ros/motpy_bboxRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """darknet_ros_msgs/BoundingBoxes input_bboxes


================================================================================
MSG: darknet_ros_msgs/BoundingBoxes
Header header
Header image_header
BoundingBox[] bounding_boxes

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: darknet_ros_msgs/BoundingBox
float64 probability
int64 xmin
int64 ymin
int64 xmax
int64 ymax
int16 id
string Class
"""
  __slots__ = ['input_bboxes']
  _slot_types = ['darknet_ros_msgs/BoundingBoxes']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input_bboxes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motpy_bboxRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.input_bboxes is None:
        self.input_bboxes = darknet_ros_msgs.msg.BoundingBoxes()
    else:
      self.input_bboxes = darknet_ros_msgs.msg.BoundingBoxes()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.input_bboxes.header.seq, _x.input_bboxes.header.stamp.secs, _x.input_bboxes.header.stamp.nsecs))
      _x = self.input_bboxes.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.input_bboxes.image_header.seq, _x.input_bboxes.image_header.stamp.secs, _x.input_bboxes.image_header.stamp.nsecs))
      _x = self.input_bboxes.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.input_bboxes.bounding_boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_bboxes.bounding_boxes:
        _x = val1
        buff.write(_get_struct_d4qh().pack(_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id))
        _x = val1.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input_bboxes is None:
        self.input_bboxes = darknet_ros_msgs.msg.BoundingBoxes()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.input_bboxes.header.seq, _x.input_bboxes.header.stamp.secs, _x.input_bboxes.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_bboxes.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_bboxes.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.input_bboxes.image_header.seq, _x.input_bboxes.image_header.stamp.secs, _x.input_bboxes.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_bboxes.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_bboxes.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_bboxes.bounding_boxes = []
      for i in range(0, length):
        val1 = darknet_ros_msgs.msg.BoundingBox()
        _x = val1
        start = end
        end += 42
        (_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id,) = _get_struct_d4qh().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.Class = str[start:end]
        self.input_bboxes.bounding_boxes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.input_bboxes.header.seq, _x.input_bboxes.header.stamp.secs, _x.input_bboxes.header.stamp.nsecs))
      _x = self.input_bboxes.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.input_bboxes.image_header.seq, _x.input_bboxes.image_header.stamp.secs, _x.input_bboxes.image_header.stamp.nsecs))
      _x = self.input_bboxes.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.input_bboxes.bounding_boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_bboxes.bounding_boxes:
        _x = val1
        buff.write(_get_struct_d4qh().pack(_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id))
        _x = val1.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input_bboxes is None:
        self.input_bboxes = darknet_ros_msgs.msg.BoundingBoxes()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.input_bboxes.header.seq, _x.input_bboxes.header.stamp.secs, _x.input_bboxes.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_bboxes.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_bboxes.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.input_bboxes.image_header.seq, _x.input_bboxes.image_header.stamp.secs, _x.input_bboxes.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_bboxes.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.input_bboxes.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_bboxes.bounding_boxes = []
      for i in range(0, length):
        val1 = darknet_ros_msgs.msg.BoundingBox()
        _x = val1
        start = end
        end += 42
        (_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id,) = _get_struct_d4qh().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.Class = str[start:end]
        self.input_bboxes.bounding_boxes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_d4qh = None
def _get_struct_d4qh():
    global _struct_d4qh
    if _struct_d4qh is None:
        _struct_d4qh = struct.Struct("<d4qh")
    return _struct_d4qh
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motpy_ros/motpy_bboxResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import darknet_ros_msgs.msg
import std_msgs.msg

class motpy_bboxResponse(genpy.Message):
  _md5sum = "2926738309370b5390bcb94eb9638965"
  _type = "motpy_ros/motpy_bboxResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
darknet_ros_msgs/BoundingBoxes tracking_bboxes

================================================================================
MSG: darknet_ros_msgs/BoundingBoxes
Header header
Header image_header
BoundingBox[] bounding_boxes

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: darknet_ros_msgs/BoundingBox
float64 probability
int64 xmin
int64 ymin
int64 xmax
int64 ymax
int16 id
string Class
"""
  __slots__ = ['tracking_bboxes']
  _slot_types = ['darknet_ros_msgs/BoundingBoxes']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tracking_bboxes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motpy_bboxResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tracking_bboxes is None:
        self.tracking_bboxes = darknet_ros_msgs.msg.BoundingBoxes()
    else:
      self.tracking_bboxes = darknet_ros_msgs.msg.BoundingBoxes()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.tracking_bboxes.header.seq, _x.tracking_bboxes.header.stamp.secs, _x.tracking_bboxes.header.stamp.nsecs))
      _x = self.tracking_bboxes.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.tracking_bboxes.image_header.seq, _x.tracking_bboxes.image_header.stamp.secs, _x.tracking_bboxes.image_header.stamp.nsecs))
      _x = self.tracking_bboxes.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.tracking_bboxes.bounding_boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracking_bboxes.bounding_boxes:
        _x = val1
        buff.write(_get_struct_d4qh().pack(_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id))
        _x = val1.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tracking_bboxes is None:
        self.tracking_bboxes = darknet_ros_msgs.msg.BoundingBoxes()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.tracking_bboxes.header.seq, _x.tracking_bboxes.header.stamp.secs, _x.tracking_bboxes.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking_bboxes.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tracking_bboxes.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.tracking_bboxes.image_header.seq, _x.tracking_bboxes.image_header.stamp.secs, _x.tracking_bboxes.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking_bboxes.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tracking_bboxes.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracking_bboxes.bounding_boxes = []
      for i in range(0, length):
        val1 = darknet_ros_msgs.msg.BoundingBox()
        _x = val1
        start = end
        end += 42
        (_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id,) = _get_struct_d4qh().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.Class = str[start:end]
        self.tracking_bboxes.bounding_boxes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.tracking_bboxes.header.seq, _x.tracking_bboxes.header.stamp.secs, _x.tracking_bboxes.header.stamp.nsecs))
      _x = self.tracking_bboxes.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.tracking_bboxes.image_header.seq, _x.tracking_bboxes.image_header.stamp.secs, _x.tracking_bboxes.image_header.stamp.nsecs))
      _x = self.tracking_bboxes.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.tracking_bboxes.bounding_boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracking_bboxes.bounding_boxes:
        _x = val1
        buff.write(_get_struct_d4qh().pack(_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id))
        _x = val1.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tracking_bboxes is None:
        self.tracking_bboxes = darknet_ros_msgs.msg.BoundingBoxes()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.tracking_bboxes.header.seq, _x.tracking_bboxes.header.stamp.secs, _x.tracking_bboxes.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking_bboxes.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tracking_bboxes.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.tracking_bboxes.image_header.seq, _x.tracking_bboxes.image_header.stamp.secs, _x.tracking_bboxes.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking_bboxes.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tracking_bboxes.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracking_bboxes.bounding_boxes = []
      for i in range(0, length):
        val1 = darknet_ros_msgs.msg.BoundingBox()
        _x = val1
        start = end
        end += 42
        (_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id,) = _get_struct_d4qh().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.Class = str[start:end]
        self.tracking_bboxes.bounding_boxes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_d4qh = None
def _get_struct_d4qh():
    global _struct_d4qh
    if _struct_d4qh is None:
        _struct_d4qh = struct.Struct("<d4qh")
    return _struct_d4qh
class motpy_bbox(object):
  _type          = 'motpy_ros/motpy_bbox'
  _md5sum = '65b9571f1ed7828d4fcc56bef7d7664b'
  _request_class  = motpy_bboxRequest
  _response_class = motpy_bboxResponse
