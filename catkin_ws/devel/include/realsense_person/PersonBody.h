// Generated by gencpp from file realsense_person/PersonBody.msg
// DO NOT EDIT!


#ifndef REALSENSE_PERSON_MESSAGE_PERSONBODY_H
#define REALSENSE_PERSON_MESSAGE_PERSONBODY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <realsense_person/PersonSkeleton.h>
#include <realsense_person/RegisteredPoint.h>
#include <realsense_person/RegisteredPoint.h>

namespace realsense_person
{
template <class ContainerAllocator>
struct PersonBody_
{
  typedef PersonBody_<ContainerAllocator> Type;

  PersonBody_()
    : skeleton()
    , gesture_origin()
    , gesture_direction()
    , gesture_confidence(0)  {
    }
  PersonBody_(const ContainerAllocator& _alloc)
    : skeleton(_alloc)
    , gesture_origin(_alloc)
    , gesture_direction(_alloc)
    , gesture_confidence(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::realsense_person::PersonSkeleton_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::realsense_person::PersonSkeleton_<ContainerAllocator> >> _skeleton_type;
  _skeleton_type skeleton;

   typedef  ::realsense_person::RegisteredPoint_<ContainerAllocator>  _gesture_origin_type;
  _gesture_origin_type gesture_origin;

   typedef  ::realsense_person::RegisteredPoint_<ContainerAllocator>  _gesture_direction_type;
  _gesture_direction_type gesture_direction;

   typedef int32_t _gesture_confidence_type;
  _gesture_confidence_type gesture_confidence;





  typedef boost::shared_ptr< ::realsense_person::PersonBody_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_person::PersonBody_<ContainerAllocator> const> ConstPtr;

}; // struct PersonBody_

typedef ::realsense_person::PersonBody_<std::allocator<void> > PersonBody;

typedef boost::shared_ptr< ::realsense_person::PersonBody > PersonBodyPtr;
typedef boost::shared_ptr< ::realsense_person::PersonBody const> PersonBodyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_person::PersonBody_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_person::PersonBody_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense_person::PersonBody_<ContainerAllocator1> & lhs, const ::realsense_person::PersonBody_<ContainerAllocator2> & rhs)
{
  return lhs.skeleton == rhs.skeleton &&
    lhs.gesture_origin == rhs.gesture_origin &&
    lhs.gesture_direction == rhs.gesture_direction &&
    lhs.gesture_confidence == rhs.gesture_confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense_person::PersonBody_<ContainerAllocator1> & lhs, const ::realsense_person::PersonBody_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonBody_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_person::PersonBody_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonBody_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::PersonBody_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonBody_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::PersonBody_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_person::PersonBody_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9bfd5f8f67d8fbcfe06054caaec91ff";
  }

  static const char* value(const ::realsense_person::PersonBody_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9bfd5f8f67d8fbcULL;
  static const uint64_t static_value2 = 0xfe06054caaec91ffULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_person::PersonBody_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_person/PersonBody";
  }

  static const char* value(const ::realsense_person::PersonBody_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_person::PersonBody_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_person/PersonSkeleton[] skeleton\n"
"realsense_person/RegisteredPoint gesture_origin\n"
"realsense_person/RegisteredPoint gesture_direction\n"
"int32 gesture_confidence\n"
"\n"
"\n"
"================================================================================\n"
"MSG: realsense_person/PersonSkeleton\n"
"string joint_type\n"
"realsense_person/RegisteredPoint skeleton_point\n"
"\n"
"\n"
"================================================================================\n"
"MSG: realsense_person/RegisteredPoint\n"
"geometry_msgs/Point world\n"
"int32 world_confidence\n"
"geometry_msgs/Point image\n"
"int32 image_confidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::realsense_person::PersonBody_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_person::PersonBody_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.skeleton);
      stream.next(m.gesture_origin);
      stream.next(m.gesture_direction);
      stream.next(m.gesture_confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PersonBody_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_person::PersonBody_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_person::PersonBody_<ContainerAllocator>& v)
  {
    s << indent << "skeleton[]" << std::endl;
    for (size_t i = 0; i < v.skeleton.size(); ++i)
    {
      s << indent << "  skeleton[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realsense_person::PersonSkeleton_<ContainerAllocator> >::stream(s, indent + "    ", v.skeleton[i]);
    }
    s << indent << "gesture_origin: ";
    s << std::endl;
    Printer< ::realsense_person::RegisteredPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.gesture_origin);
    s << indent << "gesture_direction: ";
    s << std::endl;
    Printer< ::realsense_person::RegisteredPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.gesture_direction);
    s << indent << "gesture_confidence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gesture_confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_PERSON_MESSAGE_PERSONBODY_H
