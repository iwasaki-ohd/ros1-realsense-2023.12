// Generated by gencpp from file realsense_person/RegisteredPoint.msg
// DO NOT EDIT!


#ifndef REALSENSE_PERSON_MESSAGE_REGISTEREDPOINT_H
#define REALSENSE_PERSON_MESSAGE_REGISTEREDPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace realsense_person
{
template <class ContainerAllocator>
struct RegisteredPoint_
{
  typedef RegisteredPoint_<ContainerAllocator> Type;

  RegisteredPoint_()
    : world()
    , world_confidence(0)
    , image()
    , image_confidence(0)  {
    }
  RegisteredPoint_(const ContainerAllocator& _alloc)
    : world(_alloc)
    , world_confidence(0)
    , image(_alloc)
    , image_confidence(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _world_type;
  _world_type world;

   typedef int32_t _world_confidence_type;
  _world_confidence_type world_confidence;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef int32_t _image_confidence_type;
  _image_confidence_type image_confidence;





  typedef boost::shared_ptr< ::realsense_person::RegisteredPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_person::RegisteredPoint_<ContainerAllocator> const> ConstPtr;

}; // struct RegisteredPoint_

typedef ::realsense_person::RegisteredPoint_<std::allocator<void> > RegisteredPoint;

typedef boost::shared_ptr< ::realsense_person::RegisteredPoint > RegisteredPointPtr;
typedef boost::shared_ptr< ::realsense_person::RegisteredPoint const> RegisteredPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_person::RegisteredPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_person::RegisteredPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realsense_person::RegisteredPoint_<ContainerAllocator1> & lhs, const ::realsense_person::RegisteredPoint_<ContainerAllocator2> & rhs)
{
  return lhs.world == rhs.world &&
    lhs.world_confidence == rhs.world_confidence &&
    lhs.image == rhs.image &&
    lhs.image_confidence == rhs.image_confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realsense_person::RegisteredPoint_<ContainerAllocator1> & lhs, const ::realsense_person::RegisteredPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realsense_person

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realsense_person::RegisteredPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_person::RegisteredPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::RegisteredPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_person::RegisteredPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::RegisteredPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_person::RegisteredPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_person::RegisteredPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "377e1b201e51fdf9a771993c3be57884";
  }

  static const char* value(const ::realsense_person::RegisteredPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x377e1b201e51fdf9ULL;
  static const uint64_t static_value2 = 0xa771993c3be57884ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_person::RegisteredPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_person/RegisteredPoint";
  }

  static const char* value(const ::realsense_person::RegisteredPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_person::RegisteredPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point world\n"
"int32 world_confidence\n"
"geometry_msgs/Point image\n"
"int32 image_confidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::realsense_person::RegisteredPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_person::RegisteredPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.world);
      stream.next(m.world_confidence);
      stream.next(m.image);
      stream.next(m.image_confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RegisteredPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_person::RegisteredPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_person::RegisteredPoint_<ContainerAllocator>& v)
  {
    s << indent << "world: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.world);
    s << indent << "world_confidence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.world_confidence);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "image_confidence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_PERSON_MESSAGE_REGISTEREDPOINT_H
